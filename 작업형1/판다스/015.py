# 15. 내장함수
import pandas as pd

df = pd.read_csv("./cafe4.csv")
# print(df)

# 1. len ---------------------------
# print(len(df)) # 행의 개수

# print(df.shape[0]) # 행의 개수
# print(df.shape[1]) # 열의 개수

# 2. sum ---------------------------
cond = df["가격"] > 5000

# print(sum(cond)) # 3
# print(len(df[cond])) # 3

# print(df.sum(numeric_only=True)) # sum은 컬럼별 합계를 구함
# 가격      38700.0
# 칼로리       810.0
# 이벤트가     2000.0

# 행별 합계를 구하고싶다면?
# df = df.T
# print(df.T)
#           0       1       2      3      4      5      6      7
# 메뉴    아메리카노    카페라떼    카페모카   카푸치노  에스프레소    밀크티     녹차   시그니처
# 가격     4500    5000    5500   5000   4000   5900   5300   3500
# 칼로리    10.0   110.0   250.0  110.0   20.0  210.0    0.0  100.0
# 원산지    콜롬비아   코스타리카    과테말라   과테말라  코스타리카  코스타리카  코스타리카   대한민국
# 이벤트가    NaN  1000.0  1000.0    NaN    NaN    NaN    NaN    NaN

# print(df.sum(axis=1, numeric_only=True))
# 0    4510.0
# 1    6110.0
# 2    6750.0
# 3    5110.0
# 4    4020.0
# 5    6110.0
# 6    5300.0
# 7    3600.0

# 3. 기초 통계 함수 ---------------------------
target = df["가격"]

# print("최댓값:", target.max())
# print("최솟값:", target.min())
# print("평균값:", target.mean())
# print("중앙값:", target.median())
# print("합계:", target.sum())
# print("표준편차:", target.std())
# print("분산:", target.var())

# 최댓값: 5900
# 최솟값: 3500
# 평균값: 4837.5
# 중앙값: 5000.0
# 합계: 38700
# 표준편차: 796.3084470587655
# 분산: 634107.1428571428

# 4. 분위수 ---------------------------
# 0.25 1사분위수(하위 25)
# 0.50 2사분위수 (데이터의 중앙값)
# 0.75 3사분위수 (하위 75)

# print("분위수 25:", df["가격"].quantile(0.25))
# print("분위수 75", df["가격"].quantile(0.75))
# 분위수 25: 4375.0
# 분위수 75 5350.0

# 1사분위수보다 작은 가격의 데이터 찾기
cond2 = df["가격"] < df["가격"].quantile(0.25)
# print(df[cond2])
#       메뉴    가격    칼로리    원산지  이벤트가
# 4  에스프레소  4000   20.0  코스타리카   NaN
# 7   시그니처  3500  100.0   대한민국   NaN

# 3사분위수보다 큰 가격의 데이터 찾기
cond3 = df["가격"] > df["가격"].quantile(0.75)
# print(df[cond3])
# 2  카페모카  5500  250.0   과테말라  1000.0
# 5   밀크티  5900  210.0  코스타리카     NaN

# 5. 최빈값 ---------------------------
# 최빈값이 여러개일 수 도 있으므로, 시리즈로 반환됨
# print(df["원산지"].mode()) # 0    코스타리카
# print(df["원산지"].mode()[0]) # 코스타리카

# 6. idxmax와 idxmin ---------------------------
# 데이터프레임 또는 시리즈의 열에서 최댓값/최솟값을 같는 인덱스를 반환
# print(df["가격"].idxmax()) # 5
max_idx = df["가격"].idxmax()
# print(df.loc[max_idx])
# 메뉴        밀크티
# 가격       5900
# 칼로리     210.0
# 원산지     코스타리카
# 이벤트가      NaN

# print(df.loc[max_idx, "메뉴"]) # 밀크티
# print(df.loc[max_idx]["메뉴"]) # 밀크티

# 7. nlargest와 nsmalllest ---------------------------
# 데이터프레임의 특정 컬럼에서 가장 큰 값을 반환, 내림차순 정렬

# print(df.nlargest(3, "가격"))
#      메뉴    가격    칼로리    원산지    이벤트가
# 5   밀크티  5900  210.0  코스타리카     NaN
# 2  카페모카  5500  250.0   과테말라  1000.0
# 6    녹차  5300    0.0  코스타리카     NaN

# print(df.nsmallest(3, "칼로리"))
#       메뉴    가격   칼로리    원산지  이벤트가
# 6     녹차  5300   0.0  코스타리카   NaN
# 0  아메리카노  4500  10.0   콜롬비아   NaN
# 4  에스프레소  4000  20.0  코스타리카   NaN

# 8. apply(심화) ---------------------------
# 데이터를 변경하거나 파생변수를 생성할때

# 먹어도될까요? (기준점 100)
def cal(calorie):
    if calorie >= 100:
        return "칼로리가 너무 높아요!!"
    else:
        return "드셔도 좋아요!!"

df["먹어도될까요"] = df["칼로리"].apply(cal)

# print(df)
#       메뉴    가격    칼로리    원산지    이벤트가         먹어도될까요
# 0  아메리카노  4500   10.0   콜롬비아     NaN      드셔도 좋아요!!
# 1   카페라떼  5000  110.0  코스타리카  1000.0  칼로리가 너무 높아요!!
# 2   카페모카  5500  250.0   과테말라  1000.0  칼로리가 너무 높아요!!
# 3   카푸치노  5000  110.0   과테말라     NaN  칼로리가 너무 높아요!!
# 4  에스프레소  4000   20.0  코스타리카     NaN      드셔도 좋아요!!
# 5    밀크티  5900  210.0  코스타리카     NaN  칼로리가 너무 높아요!!
# 6     녹차  5300    0.0  코스타리카     NaN      드셔도 좋아요!!
# 7   시그니처  3500  100.0   대한민국     NaN  칼로리가 너무 높아요!!

# 8. melt(심화) ---------------------------
# 데이터프레임을 재구조화, 넓은 형태의 데이터를 긴 형태의 데이터로 변환하는데 유용함
# id_vars는 필수값, value_vars는 선택

df_melt = pd.DataFrame({'Name': {0: "쿼카", 1: "알파카", 2: "시바견"},
                        "수학": {0: 90, 1: 93, 2: 85},
                        "영어": {0: 92, 1: 84, 2: 86},
                        "국어": {0: 31, 1: 94, 2: 83}
                        })

# print(df_melt)
#   Name  수학  영어  국어
# 0   쿼카  90  92  31
# 1  알파카  93  84  94
# 2  시바견  85  86  83

# print(pd.melt(df_melt, id_vars=["Name"]))
# 0   쿼카       수학     90
# 1  알파카       수학     93
# 2  시바견       수학     85
# 3   쿼카       영어     92
# 4  알파카       영어     84
# 5  시바견       영어     86
# 6   쿼카       국어     31
# 7  알파카       국어     94
# 8  시바견       국어     83

# value_vars에 컬럼을 지정하면 해당 컬럼만 긴 형태로 변형됨
# print(pd.melt(df_melt, id_vars=["Name"], value_vars=["수학", "영어"]))
# 0   쿼카       수학     90
# 1  알파카       수학     93
# 2  시바견       수학     85
# 3   쿼카       영어     92
# 4  알파카       영어     84
# 5  시바견       영어     86